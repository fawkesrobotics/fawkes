
/***************************************************************************
 *  config.tolua - Fawkes configuration interface - tolua++ wrapper
 *
 *  Created: Thu Mar 13 11:50:24 2008
 *  Copyright  2006-2008  Tim Niemueller [www.niemueller.de]
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02111-1307, USA.
 */

$#include <config/config.h>

namespace fawkes {

class Configuration
{
  class ValueIterator
  {
   public:
    ~ValueIterator();
    bool          next();
    bool          valid();

    const char *  path();
    const char *  type();

    bool          is_float();
    bool          is_uint();
    bool          is_int();
    bool          is_bool();
    bool          is_string();

    float         get_float();
    unsigned int  get_uint();
    int           get_int();
    bool          get_bool();
    std::string   get_string();

    bool          is_default();
  };

  bool          exists(const char *path);
  bool          is_float(const char *path);
  bool          is_uint(const char *path);
  bool          is_int(const char *path);
  bool          is_bool(const char *path);
  bool          is_string(const char *path);

  bool          is_default(const char *path);

  float           get_float(const char *path);
  unsigned int    get_uint(const char *path);
  int             get_int(const char *path);
  bool            get_bool(const char *path);
  std::string     get_string(const char *path);
  ValueIterator * get_value(const char *path);

  float         get_float_or_default(char *path, float f);
  int           get_int_or_default(char *path, int i);

  void          set_float(const char *path, float f);
  void          set_uint(const char *path, unsigned int uint);
  void          set_int(const char *path, int i);
  void          set_bool(const char *path, bool b);
  void          set_string(const char *path, std::string s);
  void          set_string(const char *path, const char *s);

  void          erase(const char *path);

  void          set_default_float(const char *path, float f);
  void          set_default_uint(const char *path, unsigned int uint);
  void          set_default_int(const char *path, int i);
  void          set_default_bool(const char *path, bool b);
  void          set_default_string(const char *path, std::string s);
  void          set_default_string(const char *path, const char *s);

  void          erase_default(const char *path);

  ValueIterator * iterator();

  ValueIterator * search(const char *path);

  void            lock();
  bool            try_lock();
  void            unlock();

};

}
