
/***************************************************************************
 *  blackboard.tolua - BlackBoard Interface tolua wrapper
 *
 *  Created: Tue Jan 12 10:27:59 2016
 *  Copyright  2006-2015  Tim Niemueller [www.niemueller.de]
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

$#include <blackboard/blackboard.h>
$#include <list>
$#include <string>

namespace fawkes {

class BlackBoard
{
 public:
  fawkes::Interface *  open_for_reading @ open_for_reading_generic(const char *interface_type,
                                                                   const char *identifier);
  fawkes::Interface *  open_for_writing @ open_for_writing_generic(const char *interface_type,
                                                                   const char *identifier);
  void                 close @ close_generic(fawkes::Interface *interface);

  bool                 is_alive() const;
  bool                 try_aliveness_restore();
};

$[

function fawkes.BlackBoard:open_for_reading(interface_type, identifier)
	require("interfaces."..interface_type)
  local interface = self:open_for_reading_generic(interface_type, identifier)
  return tolua.cast(interface, "fawkes::" .. interface:type())
end

function fawkes.BlackBoard:open_for_writing(interface_type, identifier)
	require("interfaces."..interface_type)
  local interface = self:open_for_writing_generic(interface_type, identifier)
  return tolua.cast(interface, "fawkes::" .. interface:type())
end

function fawkes.BlackBoard:close(interface)
  local gen_interface = tolua.cast(interface, "fawkes::Interface")
	self:close_generic(gen_interface)
end

$]

} // end namespace fawkes

#endif
