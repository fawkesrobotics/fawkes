
/***************************************************************************
 *  clock.tolua - A central clock - tolua++ template
 *
 *  Created: Wed Mar 12 23:25:14 2008
 *  Copyright  2007       Daniel Beck
 *             2007-2008  Tim Niemueller [www.niemueller.de]
 *
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

$#include <utils/time/clock.h>

namespace fawkes {

class Clock
{
  typedef enum {
    DEFAULT,
    REALTIME,
    EXTERNAL
  } TimesourceSelector;

  static Clock * instance();
  static void    finalize();

  bool is_ext_default_timesource() const;
  bool has_ext_timesource() const;
  Time ext_to_realtime(const Time& t);

  void get_time(Time &time) const;
  void get_time(Time &time, TimesourceSelector sel) const;

  void get_time(Time *time) const;
  void get_time(Time *time, TimesourceSelector sel) const;

  void get_time(struct timeval *tv) const;
  void get_time(struct timeval *tv, TimesourceSelector sel) const;

  void get_systime(struct timeval *tv) const;
  void get_systime(Time &time) const;
  void get_systime(Time *time) const;

  Time  now() const;
  float elapsed(Time *t) const;
  float sys_elapsed(Time *t) const;
};

}
