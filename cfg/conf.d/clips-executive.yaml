%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
doc-url: !url http://trac.fawkesrobotics.org/wiki/Plugins/clips-executive
---
clips-executive:
  # If true, will enable watching of facts and rules
  debug:
    enable: true

    # debug level is a number of: 0 ~ none, 1 ~ minimal, 2 ~ more, 3 ~ maximum
    level: 3

    # If CLIPS debugging is enabled, certain rules and facts can be excluded
    # from watching, e.g. if they are showing up at too high frequencies or
    # are not of interest.
    unwatch-facts: ["time"]
    unwatch-rules: ["time-retract"]

  # automatically pre-require redefine-warning feature? Enabling
  # this in the plugin instead of in the initial code (init.clp) is
  # beneficial because it already catches errors in said file.
  request-redefine-warning-feature: true

  # If set to true, will trigger the assertion of a (time (now)) fact in
  # each loop. This can be used to trigger loop events in CLIPS.
  assert-time-each-loop: true

  # If set to true will force the acquisition of the skiller control.
  # This is particularly useful to kick an SkillGUI which is holding
  # the lock just due to an oversight.
  steal-skiller-control: true

  # If set to true, goals will be cleaned automatically when they
  # reach the RETRACTED state. Disabling be useful for debugging.
  # You need to manually cleanup goals (and associated data such as
  # plans) to keep things tidy.
  automatic-goal-retraction: true

  # Directory where to look for CLIPS files
  clips-dirs: ["@BASEDIR@/src/clips-specs"]

  # Agent name. On startup the clips-agent will try to resolve a file named
  # <agent name>.clp. It must be in the CLIPS path directories.
  spec: blocksworld

  specs:
    blocksworld:

      # The following configures CX initialization.
      # Initialization is organized in three stages:
      # 1. Basic CLIPS and feature intialization
      # 2. Domain-independent CX initialization
      # 3. Domain-specific CX initialization
      # The stages and the steps within the stages run strictly
      # ordered. The next stage or step is not executed before the
      # previous one completes.
      init:
        # Basic CLIPS and feature initialization
        # The first stage is executed in an (almost) bare CLIPS
        # environment. CX-specific parts such as the domain or world
        # model have not been loaded, yet.
        # Use this to request features and load files related to such
        # features or performing other initialization duties.
        # In this stage, elements are assumed to reference Fawkes CLIPS
        # features by default, i.e., an error is reported if a requested
        # feature is not available  at the time of initialization.
        # Features will be requested and only after all have been loaded
        # initialization will progress to stage-2.
        # To override this for some entries, set "feature-request:
        # false" for the respective list elements.
        # This stage always implicitly loads the blackboard feature
        # and blackboard-init.clp.
        stage-1:
          - name: pddl-parser
          - name: robmem-wait
            feature-request: false
            files: ["BATCH|robmem-wait-init.clp"]
            wait-for: robmem-initialized
          - name: robot_memory
          - name: rl-test
          - name: clips-gym

          # - name: navgraph
          # - name: robmem-wait
          #   feature-request: false
          #   files: ["BATCH|robmem-wait-init.clp"]
          #   wait-for: robmem-initialized
          # - name: robot_memory

        # stage-2 is domain-independent CX initialization
        # It contains a set of fixed items loaded. Custom extensions may
        # be loaded in this stage. They are loaded *after* the defaults.
        stage-2:
          - name: goal-types
            files:
              - goals/run-one.clp
              - goals/run-all.clp
              - goals/try-all.clp
              - goals/run-parallel.clp
              - goals/retry.clp
              - goals/timeout.clp
              - goals/automatic.clp
              - goal-tree.clp

        # Domain-specific CX initialization.
        # In the third stage load domain-specific files such as domain
        # representations, world model bits (mode of synchronization),
        # goal reasoner and expander, and action execution machinery.
        # At this point all features requested in stage-1 have been
        # provided and the CX domain-independent initialization is
        # complete. Files are loaded in the order given, account for
        # dependencies among the files.
        # Each element of this stage must consist of a name and one or
        # more files to load.
        stage-3:
          - name: pddl-planner
            feature-request: false
            files: ["pddl-init.clp"]
            wait-for: pddl-planner-initialized
          - name: domain
            file: blocksworld/test-domain.clp
          - name: state-estimation
            file: blocksworld/state-estimation.clp
          - name: worldmodel
            # files: [wm-robmem-sync.clp, test-scenario/worldmodel-facts.clp]
            files: [blocksworld/worldmodel-facts.clp]
          # - name: coordination
          #   file: coordination-mutex.clp
          - name: goal-reasoner
            files:
              - blocksworld/goal-reasoner.clp
              - blocksworld/goals/always-fail.clp
              - blocksworld/goals/always-reject.clp
              - blocksworld/goals/succeed-second-try.clp
              - blocksworld/goals/hang-noop.clp
              - blocksworld/goals/talk.clp
              - blocksworld/goals/blocks.clp
              - blocksworld/blocks-execute-effects.clp
              - blocksworld/goals/reinforcementLearning.clp

          - name: plans
            files:
              - blocksworld/plans/talk-plan.clp
              - blocksworld/plans/blocks-plan.clp
              # - blocksworld/plans/talk-plan-temporal.clp
          - name: action-selection
            files:
              - action-selection/sequential.clp
              - action-selection/temporal.clp
          - name: action-execution
            files:
              - skills-actions.clp
              - robot-memory-sync.clp
              - blocksworld/print-action.clp
              # - lock-actions.clp
          - name: execution-monitoring
            files:
              # - execmon/stalled-sequential-plan.clp
              # - execmon/stalled-action.clp
              # - execmon/temporal-missed-dispatch.clp
              # - execmon/temporal-over-duration.clp
              - blocksworld/execution-monitoring.clp

      # Map plan actions to skill strings, used by skill action execution
      action-mapping:
        say: say{text=?(text)s, wait=true}
        say-hello: say{text="Hello ?(name)y", wait=true}
        say-hello-again: say{text="Hello again ?(name)y", wait=true}
        say-goodbye: say{text="Good bye", wait=true}
        say-cleanup: say{text="Cleaning up", wait=true}

        pick-up: say{text="running pick ?(x)y with ?(r)y", wait=true}
        # pick-up action running pick ?(x)y
        stack: say{text="run stack ?(x)y on ?(y)y with ?(robot)y", wait=true}
        unstack: say{text="rununstack ?(x)y of ?(y)y with ?(robot)y", wait=true}
        put-down: say{text="running putdown ?(x)y with ?(robot)y", wait=true}


      # Map domain predicate names to world model fact IDs
      # wm-remap:
      #   facts:
      #     # Map the prefix, i.e., replace the path by /domain/fact and
      #     # keep the last element of the path.
      #     # Example: /wm/foo -> domain predicate foo
      #     # Arguments must be compatible (same names and accepted values).
      #     # State as a list of world model fact IDs
      #     id-prefix:
      #      - /wm/foo
      #      - /wm/bar
      #     # Full mapping from domain predicate name to world model fact
      #     # ID path (without arguments).
      #     # Example: said -> /wm/spoken
      #     # Arguments must be compatible (same names and accepted values).
      #     # State as map from predicate names to world model fact ID
      #     # path.
      #     name-id:
      #      said: /wm/spoken
      #   objects:
      #     # Map the prefix, i.e., replace the path by /domain/fact and
      #     # keep the last element of the path.
      #     # Example: /wm/foo -> domain predicate foo
      #     id-prefix:
      #      - /wm/sometype
      #      - /wm/anothertype
      #     # Full mapping from domain predicate name to world model fact
      #     # ID path (without arguments).
      #     # Example: objecttype -> /wm/differentobjects
      #     # path.
      #     name-id:
      #      objecttype: /wm/differentobjects

      # Interface _types_ mentioned in the following list will be pre-loaded,
      # i.e., the fact templates will be created in stage2, before
      # user-specified code is loaded. That avoid the necessity of splitting
      # interface opening and processing in user code.
      # blackboard-preload: ["Position3DInterface"]

      # Values in the parameters subtree will be added to the "/config" tree
      # in the world model facts. Everything up until and including /parameters/
      # in the configuration path is removed.

      # Example: /clips-executive/specs/test/parameters/home-pos ->
      # /config/home-pos
      parameters:
        coordination:
          mutex:
            renew-interval: 5
            max-age-sec: 15


    test:

      # The following configures CX initialization.
      # Initialization is organized in three stages:
      # 1. Basic CLIPS and feature intialization
      # 2. Domain-independent CX initialization
      # 3. Domain-specific CX initialization
      # The stages and the steps within the stages run strictly
      # ordered. The next stage or step is not executed before the
      # previous one completes.
      init:
        # Basic CLIPS and feature initialization
        # The first stage is executed in an (almost) bare CLIPS
        # environment. CX-specific parts such as the domain or world
        # model have not been loaded, yet.
        # Use this to request features and load files related to such
        # features or performing other initialization duties.
        # In this stage, elements are assumed to reference Fawkes CLIPS
        # features by default, i.e., an error is reported if a requested
        # feature is not available  at the time of initialization.
        # Features will be requested and only after all have been loaded
        # initialization will progress to stage-2.
        # To override this for some entries, set "feature-request:
        # false" for the respective list elements.
        # This stage always implicitly loads the blackboard feature
        # and blackboard-init.clp.
        stage-1:
          - name: pddl-parser
          # - name: pddl-planner
          #   feature-request: false
          #   files: ["pddl-init.clp"]
          # - name: navgraph
          # - name: robmem-wait
          #   feature-request: false
          #   files: ["BATCH|robmem-wait-init.clp"]
          #   wait-for: robmem-initialized
          # - name: robot_memory

        # stage-2 is domain-independent CX initialization
        # It contains a set of fixed items loaded. Custom extensions may
        # be loaded in this stage. They are loaded *after* the defaults.
        stage-2:
          - name: goal-types
            files:
              - goals/run-one.clp
              - goals/run-all.clp
              - goals/try-all.clp
              - goals/run-parallel.clp
              - goals/retry.clp
              - goals/timeout.clp
              - goals/automatic.clp
              - goal-tree.clp

        # Domain-specific CX initialization.
        # In the third stage load domain-specific files such as domain
        # representations, world model bits (mode of synchronization),
        # goal reasoner and expander, and action execution machinery.
        # At this point all features requested in stage-1 have been
        # provided and the CX domain-independent initialization is
        # complete. Files are loaded in the order given, account for
        # dependencies among the files.
        # Each element of this stage must consist of a name and one or
        # more files to load.
        stage-3:
          - name: domain
            file: test-scenario/test-domain.clp
          - name: state-estimation
            file: test-scenario/state-estimation.clp
          - name: worldmodel
            # files: [wm-robmem-sync.clp, test-scenario/worldmodel-facts.clp]
            files: [wm-template-facts.clp, test-scenario/worldmodel-facts.clp]
          # - name: coordination
          #   file: coordination-mutex.clp
          - name: goal-reasoner
            files:
              - test-scenario/goal-reasoner.clp
              - test-scenario/goals/always-fail.clp
              - test-scenario/goals/always-reject.clp
              - test-scenario/goals/succeed-second-try.clp
              - test-scenario/goals/hang-noop.clp
              - test-scenario/goals/talk.clp
          - name: plans
            files:
              - test-scenario/plans/talk-plan.clp
              # - test-scenario/plans/talk-plan-temporal.clp
          - name: action-selection
            files:
              - action-selection/sequential.clp
              - action-selection/temporal.clp
          - name: action-execution
            files:
              - skills-actions.clp
              - test-scenario/print-action.clp
              # - lock-actions.clp
          - name: execution-monitoring
            files:
              - execmon/stalled-sequential-plan.clp
              - execmon/stalled-action.clp
              - execmon/temporal-missed-dispatch.clp
              - execmon/temporal-over-duration.clp
              - test-scenario/execution-monitoring.clp

      # Map plan actions to skill strings, used by skill action execution
      action-mapping:
        say: say{text=?(text)s, wait=true}
        say-hello: say{text="Hello ?(name)y", wait=true}
        say-hello-again: say{text="Hello again ?(name)y", wait=true}
        say-goodbye: say{text="Good bye", wait=true}
        say-cleanup: say{text="Cleaning up", wait=true}

      # Map domain predicate names to world model fact IDs
      # wm-remap:
      #   facts:
      #     # Map the prefix, i.e., replace the path by /domain/fact and
      #     # keep the last element of the path.
      #     # Example: /wm/foo -> domain predicate foo
      #     # Arguments must be compatible (same names and accepted values).
      #     # State as a list of world model fact IDs
      #     id-prefix:
      #      - /wm/foo
      #      - /wm/bar
      #     # Full mapping from domain predicate name to world model fact
      #     # ID path (without arguments).
      #     # Example: said -> /wm/spoken
      #     # Arguments must be compatible (same names and accepted values).
      #     # State as map from predicate names to world model fact ID
      #     # path.
      #     name-id:
      #      said: /wm/spoken
      #   objects:
      #     # Map the prefix, i.e., replace the path by /domain/fact and
      #     # keep the last element of the path.
      #     # Example: /wm/foo -> domain predicate foo
      #     id-prefix:
      #      - /wm/sometype
      #      - /wm/anothertype
      #     # Full mapping from domain predicate name to world model fact
      #     # ID path (without arguments).
      #     # Example: objecttype -> /wm/differentobjects
      #     # path.
      #     name-id:
      #      objecttype: /wm/differentobjects

      # Interface _types_ mentioned in the following list will be pre-loaded,
      # i.e., the fact templates will be created in stage2, before
      # user-specified code is loaded. That avoid the necessity of splitting
      # interface opening and processing in user code.
      # blackboard-preload: ["Position3DInterface"]

      # Values in the parameters subtree will be added to the "/config" tree
      # in the world model facts. Everything up until and including /parameters/
      # in the configuration path is removed.

      # Example: /clips-executive/specs/test/parameters/home-pos ->
      # /config/home-pos
      parameters:
        coordination:
          mutex:
            renew-interval: 5
            max-age-sec: 15

    test-pddl:
      init:
        stage-1:
          - name: pddl-parser
          - name: robmem-wait
            feature-request: false
            files: ["BATCH|robmem-wait-init.clp"]
            wait-for: robmem-initialized
          - name: robot_memory

        stage-3:
          - name: pddl-planner
            feature-request: false
            files: ["pddl-init.clp"]
            wait-for: pddl-planner-initialized
          - name: domain
            file: test-scenario-pddl/test-domain.clp
          - name: worldmodel
            file: test-scenario-pddl/worldmodel-facts.clp
          - name: goal-reasoner
            file: test-scenario-pddl/goal-reasoner.clp
          - name: goal-expander
            file: test-scenario-pddl/goal-expander-pddl.clp
          - name: action-selection
            file: test-scenario-pddl/action-selection.clp
          - name: action-execution
            files:
              - skills-actions.clp
              - robot-memory-sync.clp
              - test-scenario-pddl/print-action.clp
          - name: execution-monitoring
            file: test-scenario-pddl/execution-monitoring.clp
          - name: state-estimation
            file: test-scenario-pddl/state-estimation.clp

      # Map plan actions to skill strings.
      action-mapping:
        say-hello: say{text="Hello ?(name)y", wait=true}
        say-goodbye: say{text="Good bye", wait=true}
